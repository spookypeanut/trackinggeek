#!/usr/bin/env python
# Tracking Geek: A tool for visualizing swathes of gpx files at once
# Copyright (C) 2012, Henry Bush
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import argparse
from trackinggeek.canvas import Canvas
from ConfigParser import ConfigParser, NoSectionError, NoOptionError

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', action='store',
                        help='path to the config file to use for defaults')
    parser.add_argument('--inputdir', action='store',
                        help='path to the directory of gpx files')
    parser.add_argument('--outsvg', action='store',
                        help='path to the output svg')
    parser.add_argument('--outpng', action='store',
                        help='path to the output png')
    parser.add_argument('--outma', action='store',
                        help='path to the output Maya ascii file')
    parser.add_argument('--resolution', action='store',
                        help='absolute resolution of the output image')
    parser.add_argument('--max', action='store',
                        help='the maximum of either dimension of the'
                        'output image')
    parser.add_argument('--min', action='store',
                        help='the minimum of either dimension of the'
                        'output image')
    parser.add_argument('--latitude', action='store',
                        help='the latitude range to use, e.g. 43.1,45.6')
    parser.add_argument('--longitude', action='store',
                        help='the longitude range to use, e.g. -2.3,1.2')
    args = parser.parse_args()
    
    pixel_dimensions = {}
    config = ConfigParser()
    if args.config is not None:
        if not os.path.exists(args.config):
            raise IOError("Config file doesn't exist (%s)" % args.config)
        config.read(args.config)

    try:
        latitude = args.latitude or config.get("map", "latitude")
        try:
            min_latitude, max_latitude = latitude.split(",")
            latitude_range = (min_latitude, max_latitude)
        except ValueError:
            print("Latitude format invalid")
            parser.print_help()
            return 1
    except (NoSectionError, NoOptionError):
        latitude_range = None

    try:
        longitude = args.longitude or config.get("map", "longitude")
        try:
            min_longitude, max_longitude = longitude.split(",")
            longitude_range = (min_longitude, max_longitude)
        except ValueError:
            print("Longitude format invalid")
            parser.print_help()
            return 1
    except (NoSectionError, NoOptionError):
        longitude_range = None

    if args.min:
        pixel_dimensions["min"] = int(args.min)
    if args.max:
        pixel_dimensions["max"] = int(args.max)
    if args.resolution:
        if not "x" in args.resolution:
            x = y = args.resolution
        else:
            (x, y) = args.resolution.split("x")
        if x:
            pixel_dimensions["width"] = int(x)
        if y:
            pixel_dimensions["height"] = int(y)

    c = Canvas(pixel_dimensions=pixel_dimensions,
               latitude_range=latitude_range,
               longitude_range=longitude_range)
    if args.inputdir:
        c.add_directory(args.inputdir)
    if args.outma:
        c.save_ma(args.outma)
    if not args.outpng and not args.outsvg:
        return 0

    c.draw()
    if args.outpng:
        c.save_png(args.outpng)
    if args.outsvg:
        c.save_svg(args.outsvg)

if __name__ == "__main__":
    sys.exit(main())

