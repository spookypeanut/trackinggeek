#!/usr/bin/env python
# Tracking Geek: A tool for visualizing swathes of gpx files at once
# Copyright (C) 2012, Henry Bush
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
from trackinggeek.canvas import Canvas

#GPX_PATHS = ["./example/test2.gpx"]
             
GPX_PATHS = ["./example/test.gpx",
             "./example/test2.gpx",
             "./example/test3.gpx"]
OUTPUT_PATH = "/tmp/test.png"
IMAGE_SIZE = 512 

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--inputdir', action='store',
                        help='path to the directory of gpx files')
    parser.add_argument('--outsvg', action='store',
                        help='path to the output svg')
    parser.add_argument('--outpng', action='store',
                        help='path to the output png')
    parser.add_argument('--resolution', action='store',
                        help='absolute resolution of the output image')
    parser.add_argument('--max', action='store',
                        help='the maximum of either dimension of the'
                        'output image')
    parser.add_argument('--min', action='store',
                        help='the minimum of either dimension of the'
                        'output image')
    args = parser.parse_args()
    
    pixel_dimensions = {}
    if "min" in args and args.min:
        pixel_dimensions["min"] = int(args.min)
    if "max" in args and args.max:
        pixel_dimensions["max"] = int(args.max)
    if "resolution" in args and args.resolution:
        if not "x" in args.resolution:
            x = y = args.resolution
        else:
            (x, y) = args.resolution.split("x")
        if x:
            pixel_dimensions["width"] = int(x)
        if y:
            pixel_dimensions["height"] = int(y)

    print pixel_dimensions
    c = Canvas(pixel_dimensions=pixel_dimensions)
    for path in GPX_PATHS:
        c.add_track(path)
    c.draw()
    c.save_png(OUTPUT_PATH)

if __name__ == "__main__":
    sys.exit(main())

